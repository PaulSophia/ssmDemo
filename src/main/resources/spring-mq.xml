<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:amq="http://activemq.apache.org/schema/core"
    xmlns:jms="http://www.springframework.org/schema/jms"
    xsi:schemaLocation="http://www.springframework.org/schema/beans   
        http://www.springframework.org/schema/beans/spring-beans-4.0.xsd   
        http://www.springframework.org/schema/context   
        http://www.springframework.org/schema/context/spring-context-4.0.xsd
        http://www.springframework.org/schema/jms
        http://www.springframework.org/schema/jms/spring-jms-4.0.xsd
        http://activemq.apache.org/schema/core
        http://activemq.apache.org/schema/core/activemq-core-5.8.0.xsd">

    <!-- ActiveMQ 连接工厂 -->
    <!-- 真正可以产生Connection的ConnectionFactory，由对应的 JMS服务厂商提供-->
    <!-- 如果连接网络：tcp://ip:61616；未连接网络：tcp://localhost:61616 以及用户名，密码-->
    <amq:connectionFactory id="amqConnectionFactory"
        brokerURL="${activemq.brokerURL}" userName="${activemq.brokerURL}" password="${activemq.brokerURL}"  />

    <!-- Spring Caching连接工厂 -->
    <!-- Spring用于管理真正的ConnectionFactory的ConnectionFactory -->  
    <bean id="connectionFactory" class="org.springframework.jms.connection.CachingConnectionFactory">
        <!-- 目标ConnectionFactory对应真实的可以产生JMS Connection的ConnectionFactory -->  
        <property name="targetConnectionFactory" ref="amqConnectionFactory"></property>
        <!-- 同上，同理 -->
        <!-- <constructor-arg ref="amqConnectionFactory" /> -->
        <!-- Session缓存数量 -->
        <property name="sessionCacheSize" value="100" />
    </bean>

    <!-- Spring JmsTemplate 的消息生产者 start-->

    <!-- 定义JmsTemplate的Queue类型 -->
    <bean id="jmsQueueTemplate" class="org.springframework.jms.core.JmsTemplate">
        <!-- 这个connectionFactory对应的是我们定义的Spring提供的那个ConnectionFactory对象 -->  
        <constructor-arg ref="connectionFactory" />
        <!-- 非pub/sub模型（发布/订阅），即队列模式 -->
        <property name="pubSubDomain" value="false" />
    </bean>

    <!--Spring JmsTemplate 的消息生产者 end-->

 	<!--这个是队列目的地-->    
 	<!-- <bean id="queueDestination" class="org.apache.activemq.command.ActiveMQQueue">
        <constructor-arg>            
        	<value>helloMq</value>        
        </constructor-arg>    
 	</bean> -->

    <!-- 消息消费者 start-->

	<!-- 消息监听器 加载此处会自动调用监听方法并且一直保持服务开启，很实用 -->    
	<!-- <bean id="consumerMessageListener" class="com.paul.ssm.common.jms.activemq.queue.QueueConsumer"/>
	<bean id="consumerMessageListener2" class="com.paul.ssm.common.jms.activemq.queue.QueueConsumer2"/> -->
	    
	<!-- 消息监听容器 -->    
	<!-- <bean id="jmsContainer" class="org.springframework.jms.listener.DefaultMessageListenerContainer">        
		<property name="connectionFactory" ref="connectionFactory" />        
		<property name="destination" ref="queueDestination" />        
		<property name="messageListener" ref="consumerMessageListener" />		
		<property name="concurrentConsumers" value="1"/>    
	</bean> -->

    <!-- 定义Queue监听器 -->
    <jms:listener-container destination-type="queue" container-type="default" connection-factory="connectionFactory" acknowledge="auto">
        <jms:listener destination="helloMq" ref="queueConsumer" />
        <jms:listener destination="helloMq2" ref="queueConsumer2" />
    </jms:listener-container>
    

	<!-- <jms:listener-container destination-type="queue" container-type="default" connection-factory="connectionFactory" acknowledge="auto">
        <jms:listener destination="test.queue" ref="queueReceiver1"/>
        <jms:listener destination="test.queue" ref="queueReceiver2"/>
    </jms:listener-container> -->


    <!-- 消息消费者 end -->
</beans>